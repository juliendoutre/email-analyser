{"version":3,"sources":["Components/Header.js","Components/Ribbon.js","Components/files.js","Components/Table.js","Components/parsing.js","Components/Json.js","Components/Graph.js","Components/Summary.js","Components/Form.js","Components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Header","as","icon","textAlign","Icon","name","circular","Content","Label","color","Subheader","href","className","aria-label","width","height","viewBox","style","fill","position","top","border","right","aria-hidden","d","transformOrigin","saveAsJson","contents","a","document","createElement","blob","Blob","type","URL","createObjectURL","download","click","copyToClipboard","text","tag","innerText","body","appendChild","select","setSelectionRange","execCommand","remove","props","Segment","basic","Button","labelPosition","onClick","data","results","Object","keys","forEach","key","Array","isArray","join","Table","selectable","Body","map","Row","Cell","overflow","whiteSpace","insertIn","header","headers","push","parseHeaders","last_parsed_header","split","line","matches","match","length","replace","trim","getStringIfExists","source","k","toLowerCase","getEmailListFromField","emailRegexp","result","parseNode","str","node","ipv4","ipv6","dns","parseRoutingNodes","lines","nodes","dateStartIndex","indexOf","substring","byStartIndex","fromStartIndex","JSON","stringify","overflowX","getNodeColor","neighbors","id","level","state","enabled","this","links","by","from","reduce","acc","n","target","strength","getGraphData","svg","d3","attr","simulation","force","link","dragDrop","on","fx","x","fy","y","alphaTarget","restart","active","nodeElements","append","selectAll","enter","call","selectedNode","textElements","getTextColor","linkElements","isNeighborLink","getLinkColor","disabled","Component","emailListItem","email","List","Item","floated","Popup","inverted","opacity","content","trigger","location","Description","routingNodeItem","undefined","relaxed","selection","users","From","To","Cc","routing","user","Divider","columns","HeaderCell","record","messageHidden","activeIndex","handleChange","_","value","setState","handleSubmit","handleDismiss","handleClear","loading","handleTabChange","e","Form","marginTop","TextArea","placeholder","onChange","rows","Message","warning","hidden","onDismiss","Tab","onTabChange","panes","menuItem","render","Pane","Summary","defaultActiveIndex","Modal","size","left","marginLeft","Container","bulleted","Ribbon","Info","paddingTop","paddingBottom","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7bda997.chunk.js","sourcesContent":["import React from 'react';\nimport { Header, Icon, Label } from 'semantic-ui-react'\n\n\nexport default () => (\n    <Header as='h1' icon textAlign='center'>\n        <Icon name='mail' circular />\n        <Header.Content>\n            Email Analyser\n            <Label color='blue'>\n                BETA\n            </Label>\n        </Header.Content>\n        <Header.Subheader>\n            Parse an email headers to get more insights into its metadata.\n    </Header.Subheader>\n    </Header>\n);\n","import React from 'react';\n\nexport default () => (\n    <a href='https://github.com/juliendoutre/email-analyser' className='github-corner' aria-label='View source on GitHub'>\n        <svg width='80' height='80' viewBox='0 0 250 250' style={{\n            fill: '#151513',\n            color: '#fff',\n            position: 'absolute',\n            top: '0',\n            border: '0',\n            right: '0',\n        }} aria-hidden='true'>\n            <path d='M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z'></path>\n            <path d='M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2' fill=\"currentColor\" style={{ transformOrigin: '130px 106px' }} className='octo-arm'></path>\n            <path d='M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z' fill='currentColor' className='octo-body'></path>\n        </svg>\n    </a>\n);\n","export const saveAsJson = (contents, name) => () => {\n    let a = document.createElement(\"a\");\n    let blob = new Blob([contents], { type: \"application/json\" });\n    a.href = URL.createObjectURL(blob);\n    a.download = name;\n    a.click();\n};\n\n\nexport const saveAsCSV = (data, name) => () => {\n    let contents = \"\";\n    Object.keys(data).forEach((key) => {\n        contents += key + ',\"' + (Array.isArray(data[key]) ? data[key].join('\\n') : data[key]) + '\"\\n';\n    });\n    let a = document.createElement(\"a\");\n    let blob = new Blob([contents], { type: \"text/csv\" });\n    a.href = URL.createObjectURL(blob);\n    a.download = name;\n    a.click();\n};\n\nexport const copyToClipboard = (text) => {\n    let tag = document.createElement(\"textarea\");\n    tag.innerText = text;\n    document.body.appendChild(tag);\n\n    tag.select();\n    tag.setSelectionRange(0, 99999);\n\n    document.execCommand(\"copy\");\n    tag.remove();\n};\n","import React from 'react';\nimport { Table, Button, Icon, Segment } from 'semantic-ui-react';\nimport { saveAsCSV } from './files';\n\n\nexport default (props) =>\n    <Segment basic>\n        <Button icon labelPosition='right' onClick={saveAsCSV(props.results, 'email-analyzer-metadata-headers.csv')}>Download CSV<Icon name='download' /></Button>\n        <Table selectable basic='very'>\n            <Table.Body>\n                {Object.keys(props.results).map(key => (\n                    <Table.Row key={key}>\n                        <Table.Cell>\n                            {key}\n                        </Table.Cell>\n                        <Table.Cell>\n                            <Segment basic style={{ overflow: 'auto', width: '45vw', whiteSpace: 'nowrap' }} > {Array.isArray(props.results[key]) ? props.results[key].join('\\n') : props.results[key]}</Segment>\n                        </Table.Cell>\n                    </Table.Row>\n                ))}\n            </Table.Body>\n        </Table>\n    </Segment >;\n","const insertIn = (header, headers) => {\n    if (header.name != null) {\n        if (header.name in headers) {\n            if (Array.isArray(headers[header.name])) {\n                headers[header.name].push(header.contents);\n            } else {\n                headers[header.name] = [headers[header.name], header.contents];\n            }\n        } else {\n            headers[header.name] = header.contents;\n        }\n    }\n};\n\nexport const parseHeaders = (text) => {\n    let headers = {};\n    let last_parsed_header = { name: null, contents: null };\n\n    for (let line of text.split('\\n')) {\n        if (line !== \"\") {\n            const matches = line.match(/^[-\\w]*:/);\n\n            if (matches != null && matches.length > 0) {\n                insertIn(last_parsed_header, headers);\n\n                last_parsed_header.name = matches[0].replace(':', '');\n                last_parsed_header.contents = line.replace(matches[0], '').trim();\n            } else {\n                if (last_parsed_header.contents !== \"\") {\n                    last_parsed_header.contents += '\\n';\n                }\n                last_parsed_header.contents += line.trim();\n            }\n        }\n    }\n\n    insertIn(last_parsed_header, headers);\n\n    return headers;\n};\n\nexport const getStringIfExists = (key, source) => {\n    for (let k of Object.keys(source)) {\n        if (k.toLowerCase() === key.toLowerCase()) {\n            return source[k];\n        }\n    }\n\n    return \"\";\n}\n\nexport const getEmailListFromField = (key, source) => {\n    let emailRegexp = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi;\n    for (let k of Object.keys(source)) {\n        if (k.toLowerCase() === key.toLowerCase()) {\n            let result = source[k].match(emailRegexp);\n            return result !== null ? result : [];\n        }\n    }\n\n    return [];\n}\n\nexport const parseNode = (str) => {\n    let node = {};\n\n    let ipv4 = str.match(/[\\s(,;[](?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[\\s),;\\]]/);\n    if (ipv4 !== null && ipv4.length > 0) {\n        node['ipv4'] = ipv4[0].replace(/^[\\s(,;[]/, '').replace(/[\\s),;\\]]$/, '');\n    }\n\n    let ipv6 = str.match(/([0-9a-f]|:){1,4}(:([0-9a-f]{0,4})*){1,7}/i);\n    if (ipv6 !== null && ipv6.length > 0) {\n        node['ipv6'] = ipv6[0];\n    }\n\n    let dns = str.match(/((?=[a-z0-9-]{1,63}\\.)(xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,63}/gi);\n    if (dns !== null && dns.length > 0) {\n        node['dns'] = dns[0];\n    }\n\n    return node;\n};\n\nexport const parseRoutingNodes = (lines) => {\n    let nodes = [];\n\n    for (let line of lines) {\n        let node = {};\n\n        line = line.replace('\\n', ' ').replace('\\t', ' ');\n\n        let dateStartIndex = line.indexOf(';');\n        if (dateStartIndex !== -1) {\n            node['timestamp'] = line.substring(dateStartIndex + 1, line.length);\n            line = line.substring(0, dateStartIndex);\n        }\n\n        let byStartIndex = line.indexOf('by ');\n        if (byStartIndex !== -1) {\n            node['target'] = parseNode(line.substring(byStartIndex + 3, line.length));\n            line = line.substring(0, byStartIndex);\n        }\n\n        let fromStartIndex = line.indexOf('from ');\n        if (fromStartIndex !== -1) {\n            node['source'] = parseNode(line.substring(fromStartIndex + 5, line.length));\n        }\n\n        nodes.push(node);\n    }\n\n    return nodes;\n};\n","import React from 'react';\nimport { Segment, Button, Icon } from 'semantic-ui-react';\nimport { saveAsJson } from './files';\n\n\nexport default (props) => {\n    let contents = JSON.stringify(props.results, null, 2);\n    return <Segment basic>\n        <Button icon labelPosition='right' onClick={saveAsJson(contents, 'email-analyzer-metadata-headers.json')}>Download JSON<Icon name='download' /></Button>\n        <pre style={{ overflowX: 'auto' }}>\n            {contents}\n        </pre>\n    </Segment>;\n};\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Segment, Header } from 'semantic-ui-react';\n\nconst getGraphData = (lines) => {\n    let data = { nodes: [], links: [] };\n    for (let line of lines) {\n        let by = line.match(/by [-.:\\w]*/);\n        let from = line.match(/^from [-.:\\w]*/);\n\n        if (by !== null && by.length > 0) {\n            let id = by[0].replace('by ', '').toLowerCase();\n            if (!data.nodes.reduce((acc, n) => acc || (n.id === id), false)) {\n                data.nodes.push({ id: id });\n            }\n\n            if (from != null && from.length > 0) {\n                let source = from[0].replace('from ', '').toLowerCase();\n                data.links.push({\n                    source: source, target: id, strength: 0.5,\n                });\n\n                if (!data.nodes.reduce((acc, n) => acc || (n.id === source), false)) {\n                    data.nodes.push({ id: source });\n                }\n            }\n        }\n    }\n\n    return data;\n};\n\nconst getNeighbors = (node, links) => {\n    return links.reduce(function (neighbors, link) {\n        if (link.target.id === node.id) {\n            neighbors.push(link.source.id)\n        } else if (link.source.id === node.id) {\n            neighbors.push(link.target.id)\n        }\n        return neighbors\n    },\n        [node.id]\n    );\n};\n\nconst isNeighborLink = (node, link) => link.target.id === node.id || link.source.id === node.id;\n\nconst getNodeColor = (node, neighbors) => {\n    if (Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1) {\n        return node.level === 1 ? 'blue' : 'green'\n    }\n\n    return node.level === 1 ? 'red' : 'gray'\n};\n\nconst getLinkColor = (node, link) => isNeighborLink(node, link) ? 'green' : '#E5E5E5';\n\nconst getTextColor = (node, neighbors) => Array.isArray(neighbors) && neighbors.indexOf(node.id) > -1 ? 'green' : 'black';\n\n\nexport default class extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { enabled: 'Received' in this.props.results };\n    }\n\n    componentDidMount() {\n        if (this.state.enabled) {\n            let width = 1050;\n            let height = 500;\n\n            let data = getGraphData(this.props.results[\"Received\"]);\n\n            const svg = d3.select('#canvas')\n                .attr('width', width)\n                .attr('height', height);\n\n            const simulation = d3.forceSimulation()\n                .force('charge', d3.forceManyBody().strength(-100))\n                .force('center', d3.forceCenter(width / 2, height / 2))\n                .force('link', d3.forceLink()\n                    .id(link => link.id)\n                    .strength(link => link.strength)\n                );\n\n            const dragDrop = d3.drag()\n                .on('start', node => {\n                    node.fx = node.x\n                    node.fy = node.y\n                })\n                .on('drag', node => {\n                    simulation.alphaTarget(0.7).restart()\n                    node.fx = d3.event.x\n                    node.fy = d3.event.y\n                })\n                .on('end', node => {\n                    if (!d3.event.active) {\n                        simulation.alphaTarget(0)\n                    }\n                    node.fx = null\n                    node.fy = null\n                });\n\n            const selectNode = (selectedNode) => {\n                let neighbors = getNeighbors(selectedNode, data.links);\n                nodeElements.attr('fill', node => getNodeColor(node, neighbors));\n                textElements.attr('fill', node => getTextColor(node, neighbors));\n                linkElements.attr('stroke', link => getLinkColor(selectedNode, link));\n            };\n\n            const nodeElements = svg.append('g')\n                .selectAll('circle')\n                .data(data.nodes)\n                .enter().append('circle')\n                .attr('r', 10)\n                .attr('fill', getNodeColor)\n                .call(dragDrop)\n                .on('click', selectNode);\n\n            const textElements = svg.append('g')\n                .selectAll('text')\n                .data(data.nodes)\n                .enter().append('text')\n                .text(node => node.id)\n                .attr('font-size', 15)\n                .attr('dx', 15)\n                .attr('dy', 4);\n\n            const linkElements = svg.append('g')\n                .selectAll('line')\n                .data(data.links)\n                .enter().append('line')\n                .attr('stroke-width', 1)\n                .attr('stroke', '#E5E5E5')\n\n            simulation.nodes(data.nodes).on('tick', () => {\n                nodeElements\n                    .attr('cx', node => node.x)\n                    .attr('cy', node => node.y);\n                textElements\n                    .attr('x', node => node.x)\n                    .attr('y', node => node.y);\n                linkElements\n                    .attr('x1', link => link.source.x)\n                    .attr('y1', link => link.source.y)\n                    .attr('x2', link => link.target.x)\n                    .attr('y2', link => link.target.y);\n            });\n\n            simulation.force(\"link\").links(data.links);\n        }\n    }\n\n    render() {\n        if (this.state.enabled) {\n            return <Segment basic><svg id='canvas'></svg></Segment>;\n        } else {\n            return <Segment basic disabled><Header as='h4'>Nothing to display.</Header></Segment>;\n        }\n    }\n};\n","import React from 'react';\nimport { Header, Icon, Button, Segment, List, Table, Divider, Popup } from 'semantic-ui-react';\nimport { saveAsJson, copyToClipboard } from './files';\nimport { getStringIfExists, getEmailListFromField, parseRoutingNodes } from './parsing';\n\n\nconst prepareData = (results) => {\n    let data = {\n        users: {\n            From: getEmailListFromField('From', results),\n            To: getEmailListFromField('To', results),\n            Cc: getEmailListFromField('Cc', results),\n            'Return-Path': getEmailListFromField('Return-Path', results),\n        },\n        contents: {\n            'Message-Id': getStringIfExists('Message-Id', results),\n            'Date': getStringIfExists('Date', results),\n            'Subject': getStringIfExists('Subject', results),\n            'MIME-Version': getStringIfExists('MIME-Version', results),\n            'Content-Type': getStringIfExists('Content-Type', results),\n            'Content-Language': getStringIfExists('Content-Language', results),\n        },\n        routing: parseRoutingNodes('Received' in results ? results['Received'] : []),\n    };\n\n    return data;\n};\n\nconst emailListItem = (email, header) => (\n    <List.Item>\n        <List.Content floated='right'><Popup inverted style={{ opacity: 0.8 }} content='Check if this email address has been compromised on IHaveBeenPwned' trigger={<Button icon='zoom' circular onClick={() => document.location.href = 'https://haveibeenpwned.com/'} />} /></List.Content>\n        <List.Content floated='right'><Popup inverted style={{ opacity: 0.8 }} content='Copy to clipboard' trigger={<Button icon='copy' circular onClick={() => copyToClipboard(email)} />} /></List.Content>\n        <List.Content>\n            <List.Header>{email}</List.Header>\n            <List.Description>{header}</List.Description>\n        </List.Content>\n    </List.Item>\n);\n\nconst routingNodeItem = (node) => (\n    node !== undefined ?\n        <List relaxed selection>\n            {'dns' in node ?\n                <List.Item>\n                    <List.Content floated='right'><Popup inverted style={{ opacity: 0.8 }} content='Copy to clipboard' trigger={<Button icon='copy' circular onClick={() => copyToClipboard(node['dns'])} />} /></List.Content>\n                    <List.Header>Domain Name</List.Header>\n                    {node['dns']}\n                </List.Item> : null}\n            {'ipv4' in node ?\n                <List.Item>\n                    <List.Content floated='right'><Popup inverted style={{ opacity: 0.8 }} content='Copy to clipboard' trigger={<Button icon='copy' circular onClick={() => copyToClipboard(node['ipv4'])} />} /></List.Content>\n                    <List.Header>IPv4</List.Header>\n                    {node['ipv4']}\n                </List.Item> : null}\n            {'ipv6' in node ?\n                <List.Item>\n                    <List.Content floated='right'><Popup inverted style={{ opacity: 0.8 }} content='Copy to clipboard' trigger={<Button icon='copy' circular onClick={() => copyToClipboard(node['ipv6'])} />} /></List.Content>\n                    <List.Header>IPv6</List.Header>\n                    {node['ipv6']}\n                </List.Item> : null}\n        </List> : null\n);\n\nexport default (props) => {\n    let data = prepareData(props.results);\n\n    return (\n        <Segment basic>\n            <Button icon labelPosition='right' onClick={saveAsJson(JSON.stringify(data, null, 2), 'email-metadata-analyzer-summary.json')}>\n                Download JSON\n                <Icon name='download' />\n            </Button>\n\n            <Header as='h2'>\n                <Icon name='users' />\n                <Header.Content>Stakeholders</Header.Content>\n            </Header>\n            <Header as='h4' disabled={data.users.From.length === 0 && data.users[\"Return-Path\"].length === 0}>Sender</Header>\n            <List relaxed selection>\n                {data.users.From.map(user => emailListItem(user, 'From'))}\n                {data.users['Return-Path'].map(user => emailListItem(user, 'Return-Path'))}\n            </List>\n            <Divider />\n            <Header as='h4' disabled={data.users.To.length === 0 && data.users.Cc.length === 0}>Recipient(s)</Header>\n            <List relaxed selection>\n                {data.users.To.map(user => emailListItem(user, 'To'))}\n                {data.users.Cc.map(user => emailListItem(user, 'Cc'))}\n            </List>\n\n            <Divider />\n\n            <Header as='h2' disabled={Object.keys(data.contents).length === 0}>\n                <Icon name='file alternate' />\n                <Header.Content>Contents</Header.Content>\n            </Header>\n            <Table basic='very' selectable>\n                <Table.Body>\n                    {\n                        Object.keys(data.contents).map(k => <Table.Row disabled={data.contents[k] === \"\"}>\n                            <Table.Cell width={3}><b>{k}</b></Table.Cell>\n                            <Table.Cell width={11}>{data.contents[k]}</Table.Cell>\n                            <Table.Cell width={2} textAlign='center'>\n                                <Popup inverted style={{ opacity: 0.8 }} content='Copy to clipboard' trigger={<Button icon='copy' circular disabled={data.contents[k] === \"\"} onClick={() => copyToClipboard(data.contents[k])} />} />\n                            </Table.Cell>\n                        </Table.Row>)\n                    }\n                </Table.Body>\n            </Table>\n\n            <Divider />\n\n            <Header as='h2' disabled={Object.keys(data.contents).length === 0}>\n                <Icon name='globe' />\n                <Header.Content>Routing</Header.Content>\n            </Header>\n\n            {data.routing.length > 0 ?\n                <Table columns={3}>\n                    <Table.Header>\n                        <Table.HeaderCell>Timestamp</Table.HeaderCell>\n                        <Table.HeaderCell>Source</Table.HeaderCell>\n                        <Table.HeaderCell>Target</Table.HeaderCell>\n                    </Table.Header>\n                    <Table.Body>\n                        {data.routing.map(record => (\n                            <Table.Row key={record}>\n                                {('timestamp' in record) ? <Table.Cell>{record['timestamp']}</Table.Cell> : <Table.Cell></Table.Cell>}\n                                {('source' in record) ? <Table.Cell>{routingNodeItem(record['source'])}</Table.Cell> : <Table.Cell></Table.Cell>}\n                                {('target' in record) ? <Table.Cell>{routingNodeItem(record['target'])}</Table.Cell> : <Table.Cell></Table.Cell>}\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                </Table> : null}\n        </Segment>\n    );\n};\n","import React, { Component } from 'react';\nimport { Form, Tab, Message, Button } from 'semantic-ui-react';\nimport Table from './Table';\nimport { parseHeaders } from './parsing';\nimport JSON from './Json';\nimport Graph from './Graph';\nimport Summary from './Summary';\n\n\nexport default class extends Component {\n    state = { email: '', results: {}, messageHidden: true, activeIndex: 0 };\n\n    handleChange = (_, { name, value }) => this.setState({ [name]: value });\n\n    handleSubmit = () => {\n        this.setState({ results: {}, messageHidden: true, activeIndex: 0 });\n        const results = parseHeaders(this.state.email);\n        this.setState({ results: results });\n        this.setState({ messageHidden: Object.keys(results).length !== 0 });\n    }\n\n    handleDismiss = () => {\n        this.setState({ messageHidden: true });\n    };\n\n    handleClear = () => {\n        this.setState({ email: '', loading: false, results: {}, messageHidden: true });\n    };\n\n    handleTabChange = (e, { activeIndex }) => this.setState({ activeIndex });\n\n    render() {\n        return (\n            <div>\n                <Form style={{ textAlign: 'center', marginTop: '3em' }}>\n                    <Form.TextArea placeholder='Email contents' name='email' value={this.state.email} onChange={this.handleChange} rows={15} />\n                    <Button onClick={this.handleSubmit} >Analyse</Button>\n                    <Button onClick={this.handleClear} color='orange' disabled={this.state.email.length === 0}>Clear</Button>\n                </Form>\n                <Message warning hidden={this.state.messageHidden} onDismiss={this.handleDismiss}>\n                    <Message.Header>Could not parse any header...</Message.Header>\n                    <p>Please enter an other input to parse.</p>\n                </Message>\n                <Tab activeIndex={this.state.activeIndex} onTabChange={this.handleTabChange} panes={[\n                    { menuItem: 'Summary', render: () => <Tab.Pane><Summary results={this.state.results} /></Tab.Pane> },\n                    { menuItem: 'Routing Graph', render: () => <Tab.Pane><Graph results={this.state.results} /></Tab.Pane> },\n                    { menuItem: 'Table', render: () => <Tab.Pane><Table results={this.state.results} /></Tab.Pane> },\n                    { menuItem: 'JSON', render: () => <Tab.Pane><JSON results={this.state.results} /></Tab.Pane> },\n                ]} hidden={Object.keys(this.state.results).length === 0} style={{ marginTop: '3em' }} defaultActiveIndex={0} />\n            </div>\n        );\n    }\n};\n","import React from 'react';\nimport { Button, Modal, Header, Container, List } from 'semantic-ui-react';\n\nexport default () => (\n    <Modal trigger={<Button basic size='huge' style={{\n        position: 'absolute',\n        top: '0',\n        border: '0',\n        left: '0',\n        width: '3.2em',\n        marginLeft: '3em',\n        marginTop: '2em',\n    }} icon='info'>\n    </Button>}>\n        <Header icon='info circle' content='Info' />\n        <Modal.Content>\n            <Container text textAlign='justified'>\n                <Header size='medium'>What is this website?</Header>\n                <p>Emails are sent with a few extra information other than their plain contents. They can be useful to assess a message's origin, its path from an email server to an other, the protocols used, its content nature, etc.</p>\n                <p>These metadata are rarely displayed by email clients and are not easy for a human to read. This website purpose is to help oneself to extract meaningful information from them.</p>\n                <Header size='medium'>How can I use it?</Header>\n                <p>Just copy/paste an email metadata string in the form text area and click on  <i>Analyse</i>.</p>\n                <p>Currently, four views are available:</p>\n                <List bulleted>\n                    <List.Item><b>Summary</b> displays the most common parsed headers</List.Item>\n                    <List.Item><b>Graph</b> displays a network chart of the message trip through email servers</List.Item>\n                    <List.Item><b>Table</b> and <b>JSON</b> dispays the raw headers under CSV and JSON formats.</List.Item>\n                </List>\n                <Header size='medium'>I don't feel comfortable with entering personal email data on a website, is it safe?</Header>\n                <p>This is a legitimate concern!</p>\n                <p>This website does not perform any call to a backend that would process the results. Everything is computed inside your browser.</p>\n                <p>You can read the code on GitHub if you want to check it: <a href='https://github.com/juliendoutre/email-analyser'>https://github.com/juliendoutre/email-analyser</a></p>\n                <p>You can even deploy the website from the code on your machine (just follow the <a href='https://github.com/juliendoutre/email-analyser/blob/master/README.md'>README</a> instructions to get started).</p>\n                <Header size='medium'>How do I find an email headers?</Header>\n                <p>They are usually avaible in an email client message <i>Details</i> panel.</p>\n                <p>The following page can help you to get them from various clients : <a href='https://support.google.com/mail/answer/29436?hl=en'>https://support.google.com/mail/answer/29436?hl=en</a>.</p>\n            </Container>\n        </Modal.Content>\n    </Modal>\n);\n","import React from 'react';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './Components/Header';\nimport Ribbon from './Components/Ribbon';\nimport Form from './Components/Form';\nimport Info from './Components/Info';\n\nexport default () => (\n  <div className=\"App\">\n    <Ribbon />\n    <Info />\n    <Container style={{ paddingTop: '3em', paddingBottom: '3em' }} textAlign='left'>\n      <Header />\n      <Form />\n    </Container>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}